
#I got frustrated at there being SO MANY files, so I have thrown a whole lot together in here -Caligula

types = {
	type[ambient_object] = {
		name_field = "name"
		path = "game/common/ambient_objects"
		subtype[show_name] = {
			show_name = yes
		}
	}
	type[country_color] = {
		path = "game/common/colors"
		## type_key_filter = country
		subtype[default] = {}
		## type_key_filter = fallen_empire
		subtype[fallen_empire] = {}
		## type_key_filter = faction
		subtype[faction] = {}
		## type_key_filter = pirate
		subtype[pirate] = {}
		## type_key_filter = species
		subtype[species] = {}
	}
	type[asteroid_belt_type] = { #reason for this rename is the way vanilla names stuff, creating ambiguity.
		path = "game/common/asteroid_belts"
	}
	type[attitude] = {
		path = "game/common/attitudes"
	}
	type[button_effect] = {
		path = "game/common/button_effects"
	}
	type[country_customization] = {
		path = "game/common/country_customization"
	}
	type[static_modifier] = {
		path = "game/common/static_modifiers"
	}
	type[system_type] = {
		path = "game/common/system_types"
	}
	## type_key_filter = part
	type[start_screen_message] = {
		path = "game/common/start_screen_messages"
	}
}



ambient_object = {
	subtype[show_name] = {
		###Cannot use localisation_synced! The Vanilla case NAME_Syzygy_Remains is a bug.
		name = localisation
	}
	subtype[!show_name] = {
		name = scalar
	}
	## cardinality = 0..1
	description = localisation
	## cardinality = 0..1
	tooltip = localisation
	entity = <model_entity>
	selectable = bool
	show_name = bool
}


country_color = {
	subtype[default] = {
		##cardinality = 0..inf
		colour[rgb]
		##cardinality = 0..inf
		colour[hsv]
	}
	subtype[fallen_empire] = {
		##cardinality = 0..inf
		colour[rgb]
		##cardinality = 0..inf
		colour[hsv]
	}
	subtype[faction] = {
		##cardinality = 0..inf
		colour[rgb]
		##cardinality = 0..inf
		colour[hsv]
	}
	subtype[pirate] = {
		##cardinality = 0..inf
		colour[rgb]
		##cardinality = 0..inf
		colour[hsv]
	}
	subtype[species] = {
		##cardinality = 0..inf
		colour[rgb]
		##cardinality = 0..inf
		colour[hsv]
	}
}


#TODO Confirm
#TODO Add mesh/shader references
asteroid_belt_type = {
	## cardinality = 1..inf
	mesh = scalar
	## cardinality = 0..1
	shader = scalar
}



##TODO confirm and refine
attitude = {
	type = scalar
	behaviour = {
		## cardinality = 0..1
		attack = bool
		## cardinality = 0..1
		weaken = bool
		## cardinality = 0..1
		alliance = bool
		## cardinality = 0..1
		vassalize = bool
		## cardinality = 0..1
		trade = bool
		## cardinality = 0..1
		coexist = bool
	}
}


# TODO Confirm
# TODO Document
button_effect = {
	## replace_scope = { this = any root = any from = country }
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## replace_scope = { this = any root = any from = country }
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## replace_scope = { this = any root = any from = country }
	## cardinality = 0..1
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
}



#TODO Confirm
#TODO DOcument
#TODO Expand shelter
country_customization = {
	colony_shelter = {
		#the building should be defined as capital! and probably level 0 as well. Please add a check for this
		#the planet classes should be defined as colonizable!
		default = <building>
		## cardinality = 0..inf
		<planet_class> = <building>
	}
	## cardinality = 0..1
	graphical_culture_for_random_empire = {
		## cardinality = 0..inf
		<graphical_culture> = {
			## cardinality = 0..inf
			modifier = {
				add = int
				species_portrait = <portrait>
			}
		}
	}
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	weight = {
		## cardinality = 0..1
		base = int
		alias_name[modifier_rule_add] = alias_match_left[modifier_rule_add]
	}
}


static_modifier = {
	alias_name[modifier] = alias_match_left[modifier]
	## cardinality = 0..1
	icon_frame = int[0..9]
	## cardinality = 0..1
	icon = filepath
	## cardinality = 0..1
	important = bool
}



system_type = {
	## replace_scope = { this = system root = system }
	#TODO: it appears so, but the file uses owner (not space_owner). Check pls
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## replace_scope = { this = system root = system }
	#TODO: it appears so, but the file uses owner (not space_owner). Check pls
	## cardinality = 0..1
	weight_modifier = {
		## cardinality = 0..1
		base = int
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}


start_screen_message = {
	location = int
	localization = localisation

	## replace_scope = { root = country this = country }
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}
