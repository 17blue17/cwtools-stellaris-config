alias[effect:create_starbase] = {
    ## cardinality = 1..1
    owner = scalar

    ## cardinality = 1..1
    size = scalar

    ## cardinality = 0..100
    module = scalar

    ## cardinality = 0..100
    building = scalar

    ## cardinality = 0..1
    effect = effect
}

alias[effect:THIS] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:ROOT] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:PREV] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:PREVPREV] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:PREVPREVPREV] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:PREVPREVPREVPREV] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:FROM] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:FROMFROM] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:FROMFROMFROM] = { alias_name[effect] = alias_match_left[effect] }
alias[effect:FROMFROMFROMFROM] = { alias_name[effect] = alias_match_left[effect] }

alias[effect:hidden_effect] = { alias_name[effect] = alias_match_left[effect] }



alias[effect:if] = {
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:else_if] = {
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:else] = { alias_name[effect] = alias_match_left[effect] }

alias[effect:save_event_target_as] = scalar

alias[effect:event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:ship_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:country_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:pop_faction_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:pop_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:fleet_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

alias[effect:planet_event] = {
    id = scalar
    ## cardinality = 0..1
    days = int
    ## cardinality = 0..1
    random = int
}

#Scopes

alias[effect:last_created_leader] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:last_created_country] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:last_created_fleet] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:last_created_pop] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:last_created_species] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:last_created_ambient_object] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:species] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:starbase] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:capital_scope] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:orbit] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:orbital_deposit_tile] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:owner_species] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:overlord] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:solar_system] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:space_owner] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:pop_faction] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:home_planet] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:planet] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:owner] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:controller] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:ruler] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:leader] = {
    alias_name[effect] = alias_match_left[effect]
}

### Executes enclosed effects on a random leader owned by scoped country that meets the limit criteria
alias[effect:every_owned_leader] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_owned_leader] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_owned_starbase] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}
 
alias[effect:random_owned_starbase] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}
 
alias[effect:every_pop_faction] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_pop_faction] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_owned_pop] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_owned_pop] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_pop] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_pop] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_relation] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_relation] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_owned_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_owned_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_playable_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_playable_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_system_in_cluster] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:observation_outpost_owner] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:observation_outpost_owner] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_planet_within_border] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_planet_within_border] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_mining_station] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_mining_station] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_research_station] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_research_station] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

#there is no evidence that limit works on these two
alias[effect:every_subject] = {
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:random_subject] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_owned_fleet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_owned_fleet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_neighbor_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_neighbor_country] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_neighbor_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_neighbor_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_fleet_in_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_fleet_in_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_ambient_object] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_system_ambient_object] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_ambient_object] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_system_ambient_object] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_sector] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_sector] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_rim_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_rim_system] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_moon] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_moon] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_tile] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_tile] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_neighboring_tile] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_neighboring_tile] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_system_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_system_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_ship] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_owned_ship] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_owned_ship] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:every_controlled_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_controlled_planet] = {
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}


alias[effect:closest_system] = {
	##cardinality = 0..1
	min_steps = int
	##cardinality = 0..1
	max_steps = int
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}


#enemy should be a target scope. If these scopes exist at all
alias[effect:every_war_defender] = {
	enemy = scalar
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_war_defender] = {
	enemy = scalar
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:every_war_attacker] = {
	enemy = scalar
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}
alias[effect:random_war_attacker] = {
	enemy = scalar
	##cardinality = 0..1
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[effect] = alias_match_left[effect]
}



alias[effect:add_modifier] = {
    modifier = <static_modifier>
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}


#localisation actually
alias[effect:custom_tooltip] = scalar

alias[effect:add_opinion_modifier] = {
    who = scalar
    modifier = <opinion_modifier>
}


alias[effect:remove_modifier] = <static_modifier>


#flags
alias[effect:set_country_flag] = scalar
alias[effect:set_planet_flag] = scalar
alias[effect:set_pop_facton_flag] = scalar
alias[effect:set_star_flag] = scalar
alias[effect:set_species_flag] = scalar
alias[effect:set_pop_flag] = scalar
alias[effect:set_fleet_flag] = scalar
alias[effect:set_ship_flag] = scalar
alias[effect:set_global_flag] = scalar
alias[effect:set_leader_flag] = scalar
alias[effect:set_ambient_object_flag] = scalar
alias[effect:set_megastructure_flag] = scalar

alias[effect:remove_country_flag] = scalar
alias[effect:remove_planet_flag] = scalar
alias[effect:remove_pop_facton_flag] = scalar
alias[effect:remove_star_flag] = scalar
alias[effect:remove_species_flag] = scalar
alias[effect:remove_pop_flag] = scalar
alias[effect:remove_fleet_flag] = scalar
alias[effect:remove_ship_flag] = scalar
alias[effect:remove_global_flag] = scalar
alias[effect:remove_leader_flag] = scalar
alias[effect:remove_ambient_object_flag] = scalar
alias[effect:remove_megastructure_flag] = scalar

#Ideally should be years or months or days for all these
alias[effect:set_timed_country_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_planet_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_pop_faction_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}

alias[effect:set_timed_star_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_species_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_pop_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_fleet_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_ship_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_global_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_leader_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_ambient_object_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}
alias[effect:set_timed_megastructure_flag] = {
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}



#missing who = scope
alias[effect:set_relation_flag] = {
    who = scalar
    flag = scalar
}

#missing who = scope
alias[effect:set_timed_relation_flag] = {
    who = scalar
    flag = scalar
    ##cardinality = 0..1
    years = int
    ##cardinality = 0..1
    months = int
    ##cardinality = 0..1
    days = int
}

#missing who = scope
alias[effect:remove_relation_flag] = {
    who = scalar
    flag = scalar
}



alias[effect:change_government] = {
    ## cardinality = 0..1
    authority = random
    ## cardinality = 0..1
    authority = <authority>
    ## cardinality = 0..1
    civics = random
    ## cardinality = 0..1
    civics = {
		## cardinality = 1..3
		civic = <civic>
	}
}


#ideally, "heir" should only be if type = ruler
alias[effect:kill_leader] = {
    ##cardinality = 0..1
    type = enum[leader_classes]
	show_notification = bool
    ##cardinality = 0..1
    heir = bool
}

alias[effect:shift_ethic] = <ethos>
alias[effect:country_add_ethic] = <ethos>
alias[effect:country_remove_ethic] = <ethos>
						

alias[effect:kill_pop] = yes
alias[effect:enslave_pop] = bool
alias[effect:destroy_colony] = yes
alias[effect:set_ruined] = yes

alias[effect:random_list] = {
    int = { 
		##cardinality = 0..100
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
        alias_name[effect] = alias_match_left[effect]
    }
}

alias[effect:random] = {
	chance = int[1...99]
	alias_name[effect] = alias_match_left[effect]
}

alias[effect:create_fleet_from_naval_cap] = float

alias[effect:exile_leader_as] = scalar

#need to check whether any more of these are 
#creator should be a scope
###Creates a new saved leader for the scoped country with a lookup key
#alias[effect:create_saved_leader] = {
#	key = scalar	localisation_synced
#	creator = scalar
#	name = <random / string>
#	species = <target / key>
#	##cardinality = 0..1
#	gender = enum[genders]
#	type = <random / key>
#	skill = <random / int>
#	set_age = <int>
#	traits = { trait = <key> trait = <key> }
#}

#who should be country
alias[effect:add_claims] = {
	who = scalar
	num_of_claims = int
	show_notification = bool
}

#should be country
alias[effect:set_owner] = scalar

#should be a location scope
alias[effect:set_location] = scalar
#set_location = { target = <target> distance = <int/random> angle = <int/random> }

#variables
alias[effect:set_variable] = {
	which = scalar
	value = float
}
#presumably need to check the variable exists first for these, somehow
alias[effect:change_variable] = {
	which = scalar
	value = float
}
###Decrements a previously-set variable by a specific amount
alias[effect:subtract_variable] = {
	which = scalar
	value = float
}
###Multiplies a previously-set variable by a specific amount
alias[effect:multiply_variable] = {
	which = scalar
	value = float
}
###Divides a previously-set variable by a specific amount
alias[effect:divide_variable] = {
	which = scalar
	value = float
}

#max should not be less than min...
alias[effect:add_monthly_resource_mult] = {
	resource = <resource>
	value = int
	min = int
	max = int
}

#should be trait.leader_trait
alias[effect:add_trait] = <trait>
#should be trait.ruler_trait
alias[effect:add_ruler_trait] = <trait>


#apparently while = variable also works
#also, at least one of while and limit should be there
alias[effect:while] = {
	## cardinality = 0..1
	count = int
	## cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

#should refer to correct scopes
alias[effect:resettle_pop] = {
	pop = scalar
	planet = scalar
	## cardinality = 0..1
	tile = scalar
}

#these should all be country = country
#also, most of these are not used in Vanilla (the first is, I did the cardinality based on it)
###Set citizenship type for scoped species/pop/leader
alias[effect:set_citizenship_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[citizenship_types]
	cooldown = bool
}
###Set military service type for scoped species/pop/leader
alias[effect:set_military_service_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[military_service_types]
	cooldown = bool
}
###Set purge type for scoped species/pop/leader
alias[effect:set_purge_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[purge_types]
	cooldown = bool
}
###Set slavery type for scoped species/pop/leader
alias[effect:set_slavery_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[slavery_types]
	cooldown = bool
}
###Set population control for scoped species/pop/leader
alias[effect:set_population_controls] = {
	## cardinality = 0..1
	country = scalar
	type = enum[population_controls]
	cooldown = bool
}
###Set migration control for scoped species/pop/leader
alias[effect:set_migration_controls] = {
	## cardinality = 0..1
	country = scalar
	type = enum[migration_controls]
	cooldown = bool
}
###Set living standard for scoped species/pop/leader
alias[effect:set_living_standard] = {
	## cardinality = 0..1
	country = scalar
	type = enum[living_standards]
	cooldown = bool
}


#should somehow link to exile_leader_as
###Reinstates a previously-exiled leader to the scoped country/fleet/army/pop faction
alias[effect:set_leader] = scalar

#scripted effects
alias[effect:<scripted_effect>] = bool