types = {
	## type_key_filter = guiTypes
	type[gui_type] = {
		path = "game/interface"
		severity = warning
	}
}

#GUI files under /interface have a unique structure. They are nestled within guiTypes = { }, within which there are different elements such as
#containerWindowType = { }, listBoxType = { }, scrollbarType = { } and so forth that nestle various different elements underneath them.
#Each one of these elements usually has a unique name or key identifier, but the problem is that
#you can have these elements nestled within other such like elements as well. For example, you can have containerwindowtype nestled within another
#containerwindowtype. This will require some work on Dayshine's part to figure out how to parse this. I also do not know what is optional
#and what is not optional. CWTools should warn users that removing vanilla elements alltogether will result in a CTD!
#see core.gui for a weird example.

# You should also know, that not all of this stuff is suitable for modding, as a lot of it has been designed to represent the data, received
# from the core game through some hardcoded way (like listboxes, grids and so on). -- Iyur

# TODO:
# [ ] All this stuff requires to sort out all parameters, properties, etc, to segregate them by their purpose
# [ ] To add description for some exotic stuff/parameters
# [ ] Refactor to use an alias for all the basic things that every gui element supports

enums = {
	# Position of elements
	enum[direction] = {
	    UPPER_LEFT #can be lower case as well! Vanilla has a mix of the two for no reason.
	    UPPER_RIGHT
	    CENTER_DOWN
		CENTER_UP
		CENTER_CENTER
		CENTERED_UP
	    LOWER_LEFT
	    LOWER_RIGHT
	    LEFT
	    RIGHT #this one doesn't appear in vanilla, I just assumed it exists in theory.
		CENTER
		CENTRE
	}
	# Available actions
	enum[actionshortcut] = {
	    accept
	    cancel
	    delete
		focus_camera
		start
	}
	enum[button_sounds] = {
		no_sound
		interface
		ui_galaxy_map_open
		ui_galaxy_map_close
		ui_click_pause
		ui_speed_down_time_click
		ui_speed_up_time_click
		ui_click_map_mode
		ui_click_research_tab
		mouse_over
		tab_click
		back_click
		outliner_click_tab
		confirmation
		confirm_click
		click
		click_outliner
		research_click_01
	}
	complex_enum[scrollbar_types] = {
		path = "game/interface"
		name = {
			scrollbarType = {
				name = enum_name
			}
		}
	}
	complex_enum[vertical_scrollbar_types] = {
		path = "game/interface"
		name = {
			extendedScrollbarType = {
				name = enum_name
			}
		}
	}
}

gui_type = {
	alias_name[gui] = alias_match_left[gui]
}

	### Used to set a position of entire containers or elements
	alias[gui:positionType] = {
		name = scalar
		position = {
			x = int
			y = int
		}
	}

	### Used to show in tooltip sections
  	alias[gui:textboxType] = {
		name = scalar
		textureFile = filepath
		font = <bitmapfont>
		borderSize = {
			x = int
			y = int
		}
		position = {
			x = int
			y = int
		}
		maxWidth = int
		maxHeight = int
    }

    # Normal block for displaying text
  	alias[gui:instantTextboxType] = {
		## cardinality = 0..1
		id = scalar
		## cardinality = 0..1
		textureFile = filepath
		name = scalar
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		borderSize = {
			x = int
			y = int
		}
		## cardinality = 0..1
		maxWidth = int
		## cardinality = 0..1
		maxHeight = int
		font = <bitmapfont>
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		text_color_code = enum[textcolors]
		## cardinality = 0..1
		alwaysTransparent = bool
		## cardinality = 0..1
		fixedSize = bool

		#one of these is required!
		## cardinality = 0..1
		format = enum[direction]
		## cardinality = 0..1
		vertical_alignment = enum[direction]
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		pdx_tooltip = localisation
		## cardinality = 0..1
		scrollbarType = enum[scrollbar_types]
    }

    # Text type area
	alias[gui:editBoxType] = {
		name = scalar
		position = {
			x = int
			y = int
		  }
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		spriteType = <sprite>
		## cardinality = 0..1
		textureFile = filepath
		## cardinality = 0..1
		borderSize = {
			x = int
			y = int
		}
		font = <bitmapfont>
		## cardinality = 0..1
		cursor = {
			x = int
			y = int
		}
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		instantTextBoxType = bool
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		max_characters = int
		## cardinality = 0..1
		allow_multi_line = bool
		## cardinality = 0..1
		defaultSelection = bool

		#id and nav can be attached to various elements. See the bottom of this file.
		## cardinality = 0..1
		<id_and_nav>

		## cardinality = 0..1
		#overlay can be attached to various elements it seems. The format is always the same! see bottom of this file!
		<overlay>
	}

	# Container for listed items, usually option entries in event/diplo windows.
	alias[gui:smoothListboxType] = {
		name = scalar
		position = {
			x = int
			y = int
		}
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		scrollbarType = enum[scrollbar_types] #this is tied to instances defind as <scrollbarType> with a unique key.
		## cardinality = 0..1
		borderSize = {
			x = int
			y = int
		}
		## cardinality = 0..1
		backGround = <sprite>
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		autohide_scrollbar = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		spacing = int
		## cardinality = 0..1
		priority = int
		## cardinality = 0..1
		alwaystransparent = bool

		## cardinality = 0..1
		<id_and_nav>
	}

	# General graphical block
  	alias[gui:containerWindowType] = {
		## cardinality = 0..1
		id = scalar
		name = scalar
		## cardinality = 0..1
		alias_name[background] = alias_match_left[background] #see the bottom of the file!
			## cardinality = 0..1
		size = {
			width = int
			width = percentage
			height = int
			height = percentage
		}
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		origo = enum[direction]
		## cardinality = 0..1
		clipping = bool
		## cardinality = 0..1
		moveable = bool
		## cardinality = 0..1
		show_position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		hide_position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		margin = {
			top = int
			bottom = int
		}
		## cardinality = 0..1
		animation_time = int
		## cardinality = 0..1
		animation_type = decelerated
		## cardinality = 0..1
		hide_animation_type = decelerated
		## cardinality = 0..1
		show_animation_type = decelerated

		## cardinality = 0..1
		verticalScrollbar = enum[vertical_scrollbar_types]
		## cardinality = 0..1
		show_sound = enum[button_sounds]

		#basically containerwindowtype elements can have any element - including other containerwindowtypes nestled within them.
		#i do not know the rules for what is ok and what isn't.
		## cardinality = 0..inf
		alias_name[gui] = alias_match_left[gui]
	}

	# Normal icon instance
	alias[gui:iconType] = {
		name = scalar
		#one of these two is required!
		## cardinality = 0..1
		quadTextureSprite = <sprite>
		## cardinality = 0..1
		spriteType = <sprite>
		## cardinality = 0..1
		position = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		centerPosition = bool
		## cardinality = 0..1
		alwaystransparent = bool
		## cardinality = 0..1
		rotation = float
		## cardinality = 0..1
		scale = float
		## cardinality = 0..1
		frame = int
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		pdx_tooltip = localisation
	}

	# Default game button. In some cases could be replaced by effectButtonType without CTD
  	alias[gui:buttonType] = {
		## cardinality = 0..1
		id = scalar
		name = scalar

		#one of these is required for buttontype entries. I don't know whats the difference between these sprites, but code wise they are the same I think. pls check.
		## cardinality = 0..1
		quadTextureSprite = <sprite>
		## cardinality = 0..1
		spriteType = <sprite>
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		format = enum[direction]
		## cardinality = 0..1
		size = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		borderSize = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		hitbox_margin = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		font = <bitmapfont>
		#there can be text = and buttonText = for buttontypes. I don't know whats the difference between them.
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		buttonText = localisation
		## cardinality = 0..1
		buttonFont = <bitmapfont>
		## cardinality = 0..1
		scale = float
		## cardinality = 0..1
		frame = int

		## cardinality = 0..1
		navRight = enum[vertical_scrollbar_types]
		## cardinality = 0..1
		navLeft = enum[vertical_scrollbar_types]

		## cardinality = 0..1
		pdx_tooltip = localisation #this is a tooltip localisation.
		## cardinality = 0..1
		pdx_tooltip_delayed = localisation #this is a tooltip localisation.
		## cardinality = 0..1
		delayedTooltipText = localisation
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		oversound = <sound_effect>
		## cardinality = 0..1
		oversound = enum[button_sounds]
		## cardinality = 0..1
		alwaysTransparent = bool

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		clicksound = enum[button_sounds]
		## cardinality = 0..1
		no_clicksound = bool

		## cardinality = 0..1
		shortcut = scalar #--> this isn't scalar really, its a key binding with the keyboard!.
		## cardinality = 0..1
		multiline = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		actionShortcut = enum[actionshortcut]
		## cardinality = 0..1
		pdx_tooltip_anchor_offset = {
			x = int
			y = int
		}
		## cardinality = 0..1
		pdx_tooltip_anchor_orientation = enum[direction]


		## cardinality = 0..1
		web_link = scalar

		## cardinality = 0..1
		<id_and_nav>
	}

	# Not a vanilla's content.
	# Similar to default buttonType, but linked with specific events, described in button_effects.
	# I guess, all parameters below are similar to buttonType, but need to make some tests -- Iyur
	alias[gui:effectButtonType] = {
		## cardinality = 0..1
		id = scalar
		name = scalar
		effect = <button_effect> #defined under /common/button_effects.

		#one of these is required for buttontype entries. I don't know whats the difference between these sprites, but code wise they are the same I think. pls check.
		## cardinality = 0..1
		quadTextureSprite = <sprite>
		## cardinality = 0..1
		spriteType = <sprite>
		## cardinality = 0..1
		size = {
		  x = int
		  y = int
		}
		position = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		borderSize = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		hitbox_margin = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		font = <bitmapfont>
		#there can be text = and buttonText = for buttontypes. I don't know whats the difference between them.
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		buttonText = localisation
		## cardinality = 0..1
		frame = int
		## cardinality = 0..1
		buttonFont = <bitmapfont>
		## cardinality = 0..1
		scale = float

		## cardinality = 0..1
		pdx_tooltip = localisation #this is a tooltip localisation.
		## cardinality = 0..1
		delayedTooltipText = localisation
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		oversound = <sound_effect>

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool

		## cardinality = 0..1
		shortcut = scalar #--> this isn't scalar really, its a key binding with the keyboard!.
		## cardinality = 0..1
		multiline = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		actionShortcut = enum[actionshortcut]

		## cardinality = 0..1
		<id_and_nav>
	}

	# Icon-like button ?
    alias[gui_button:guiButtonType] = {
		name = scalar
		position = {
		  x = int
		  y = int
		}
		quadTextureSprite = <sprite>
		## cardinality = 0..1
		parent = <gui_type>

		#there appear to be various different types of optional localisations here
		## cardinality = 0..1
		tooltip = localisation
		## cardinality = 0..1
		tooltipText = localisation
		## cardinality = 0..1
		pdx_tooltip = localisation
		## cardinality = 0..1
		delayedTooltipText = localisation
		## cardinality = 0..1
		buttonText = localisation
		## cardinality = 0..1
		buttonFont = <bitmapfont>
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		shortcut = scalar #not really scalar, tied to a keyboard key!

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		clicksound = enum[button_sounds]
		## cardinality = 0..1
		no_clicksound = bool
		## cardinality = 0..1
		frame = int #for portraits, according to vanilla.
	}

	alias[gui:spinnerType] = {
		id = scalar
		name = scalar
		leftbutton = scalar
		rightbutton = scalar
		size = {
			x = int
			y = int
		}
		position = {
			x = int
			y = int
		}
		priority = int
		borderSize = {
			x = int
			y = int
		}
		horizontal = int
		maxValue = int
		startValue = int
		## cardinality = 0..1
		defaultSelection = bool
		#in vanilla the buttons used in the above are nestled within the scrollbarType field, see core.gui.
    	## cardinality = 0..inf
		alias_name[gui_button] = alias_match_left[gui_button]
	}

	# Default scrollbar
	alias[gui:scrollbarType] = {
		## cardinality = 0..1
		id = scalar
		name = scalar
		slider = scalar
		track= scalar
		leftbutton = scalar
		rightbutton = scalar
		priority = int #no idea what this is.
		size = {
			x = int
			y = int
		}
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		borderSize = {
		  x = int
		  y = int
		}
		maxValue = int
		minValue = int
		stepSize = int
		startValue = int
		horizontal = int

		#in vanilla the buttons used in the above are nestled within the scrollbarType field, see core.gui.
    	## cardinality = 0..inf
		alias_name[gui_button] = alias_match_left[gui_button]
	}

	# ?
	alias[gui:extendedScrollbarType] = {
		name = scalar
		position = {
		  x = int
		  y = int
		}
		size = {
			width = int
			height = int
		}
		startValue = int
		horizontal = bool
		## cardinality = 0..1
		alias_name[background] = alias_match_left[background] #see the bottom of the file!

		## cardinality = 0..1
		track = {
			name = scalar
			quadTextureSprite = <sprite>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		slider = {
			name = scalar
			quadTextureSprite = <sprite>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		decreaseButton = {
			name = scalar
			quadTextureSprite = <sprite>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		increaseButton = {
			name = scalar
			quadTextureSprite = <sprite>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
	}

	alias[gui:checkboxType] = {
		name = scalar
		## cardinality = 0..1
		spriteType = <sprite>
		## cardinality = 0..1
		quadTextureSprite = <sprite>
		## cardinality = 0..1
		pdx_tooltip = localisation
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]

	}

	alias[gui:OverlappingElementsBoxType] = {
		name = scalar
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		spacing = int
		## cardinality = 0..1
		format = enum[direction]
		## cardinality = 0..1
		Orientation = enum[direction]

	}
	alias[gui:listBoxType] = {
		name = scalar
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		priority = int
		## cardinality = 0..1
		spacing = int
		## cardinality = 0..1
		autohide_scrollbar = bool
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		borderSize = {
			x = int
			y = int
		}
		## cardinality = 0..1
		scrollbartype = enum[scrollbar_types]
		## cardinality = 0..1
		backGround = <sprite>
	}

	alias[gui:gridBoxType] = {
		name = scalar
		slotSize = {
			width = int
			height = int
		}
		## cardinality = 0..1
		max_slots_horizontal = int
		## cardinality = 0..1
		max_slots_vertical = int
		## cardinality = 0..1
		format = enum[direction]
		## cardinality = 0..1
		size = {
			width = int
			height = int
		}
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		padding = {
			## cardinality = 0..1
			left = int
			## cardinality = 0..1
			top = int
			## cardinality = 0..1
			right = int
			## cardinality = 0..1
			bottom = int
		}
		alias_name[background] = alias_match_left[background]
	}
	alias[gui:windowType] = {
		name = scalar
		## cardinality = 0..1
		backGround = <sprite>
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		moveable = int
		## cardinality = 0..1
		dontRender = ""
		## cardinality = 0..1
		horizontalBorder= ""
		## cardinality = 0..1
		verticalBorder= ""
		## cardinality = 0..1
		fullScreen = bool
		## cardinality = 0..1
		Orientation = enum[direction]
		alias_name[gui] = alias_match_left[gui]
	}
	#gridBoxType = {}
	#dropDownBoxType = {}
	#expandedWindow = {}
	#checkboxType = {}
	#checkboxType = {}
	#listboxType = {}
	#windowType = {}
	#spinnerType = {}



# MINOR / OPTIONAL STUFF

# graphical overlay for some elements
overlay = {
	name = <containerWindowType> #example: "selected_overlay" --> this refers to an containerWindowType with this key!
	spriteType = <sprite>
	position = {
		x = int
		y = int
	}
	size = {
		width = int
		height = int
	}
}

# Moving between buttons/gui stuff
id_and_nav = {
	#these appear only in the species gamepad gui configuration. They appear to be tied to hardcoded instances that connect to
	#asset selector files (see gfx/portraits/asset_selectors) or localisations - examples: "research" "scientist" "ok etc.
	#there should probably be a way to parse these and figure this out.
	## cardinality = 0..1 #id is not always required it seem, but when the navUP/DOWN/RIGHT/LEFT uses a key with id_ it appears to be required.
	id = scalar #"id_name"
	## cardinality = 0..1
	navUp = scalar #"id_male"
	## cardinality = 0..1
	navDown = scalar #"id_title"
	## cardinality = 0..1
	navRight = scalar #"id_hairstyle"
	## cardinality = 0..1
	navLeft = scalar #"id_hairstyle"
	## cardinality = 0..1
}

# Background section (mostly for containers)
alias[background:background] = {
	name = scalar
	## cardinality = 0..1
	quadTextureSprite = <sprite>
	# optional
	## cardinality = 0..1
	spriteType = <sprite>
	## cardinality = 0..1
	position = {
		x = int
		y = int
	}
	## cardinality = 0..1
	pdx_tooltip = localisation
	## cardinality = 0..1
	tooltip_mode_enabled = bool
	## cardinality = 0..1
	alwaysTransparent = bool
	## cardinality = 0..1
	clicksound = <sound_effect>
	## cardinality = 0..1
	clicksound = enum[button_sounds]
	## cardinality = 0..1
	oversound = enum[button_sounds]

}
