types = {
	## type_key_filter = positionType
	type[position_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = textboxType
	type[textbox_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = instantTextboxType
	type[instantTextbox_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = editBoxType
	type[editBox_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = smoothListboxType
	type[smoothListbox_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = containerWindowType
	type[containerWindow_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = iconType
	type[icon_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = buttonType
	type[button_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = effectButtonType
	type[effectButton_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = guiButtonType
	type[guiButton_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = scrollbarType
	type[scrollbar_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = extendedScrollbarType
	type[extendedScrollbar_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
	## type_key_filter = guiButtonType
	type[guiButton_type] = {
		skip_root_key = guiTypes
		path = "game/interface" #*.GUI files!
	}
}

#GUI files under /interface have a unique structure. They are nestled within guiTypes = { }, within which there are different elements such as
#containerWindowType = { }, listBoxType = { }, scrollbarType = { } and so forth that nestle various different elements underneath them.
#Each one of these elements usually has a unique name or key identifier, but the problem is that
#you can have these elements nestled within other such like elements as well. For example, you can have containerwindowtype nestled within another
#containerwindowtype. This will require some work on Dayshine's part to figure out how to parse this. I also do not know what is optional
#and what is not optional. CWTools should warn users that removing vanilla elements alltogether will result in a CTD!
#see core.gui for a weird example.

# You should also know, that not all of this stuff is suitable for modding, as a lot of it has been designed to represent the data, received
# from the core game through some hardcoded way (like listboxes, grids and so on). -- Iyur

# TODO:
# [ ] All this stuff requires to sort out all parameters, properties, etc, to segregate them by their purpose
# [ ] To add description for some exotic stuff/parameters

enums = {
	# Position of elements
	enum[direction] = {
	    UPPER_LEFT #can be lower case as well! Vanilla has a mix of the two for no reason.
	    upper_left
	    UPPER_RIGHT
	    upper_right
	    CENTER_DOWN
	    center_down
	    CENTER_UP
	    center_up
	    LOWER_LEFT
	    lower_left
	    LOWER_RIGHT
	    lower_right
	    LEFT
	    left
	    RIGHT #this one doesn't appear in vanilla, I just assumed it exists in theory.
	    right
	    CENTER
	    center
	}
	# Available actions
	enum[actionshortcut] = {
	    accept
	    canel
	    delete
	    focus_camera
	}
}



	### Used to set a position of entire containers or elements
	position_type = {
		name = <key>
		position = {
			x = int
			y = int
		}
	}

	### Used to show in tooltip sections
  	textbox_type = {
		name = <key>
		textureFile = filepath
		font = <font>
		borderSize = {
			x = int
			y = int
		}
		position = {
			x = int
			y = int
		}
		maxWidth = int
		maxHeight = int
    }

    # Normal block for displaying text
  	instantTextbox_type = {
		name = <key>
		position = {
			x = int
			y = int
		}
		maxWidth = int
		maxHeight = int
		font = <font>
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		text_color_code = <color_define>
		## cardinality = 0..1
		alwaysTransparent = bool
		## cardinality = 0..1
		fixedSize = bool

		#one of these is required!
		## cardinality = 0..1
		format = enum[direction]
		## cardinality = 0..1
		vertical_alignment = enum[direction]
		## cardinality = 0..1
		orientation = enum[direction]
    }

    # Text type area
	editBox_type = {
		name = <key>
		position = {
			x = int
			y = int
		  }
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		spriteType = <sprite_type>
		## cardinality = 0..1
		textureFile = filepath
		## cardinality = 0..1
		borderSize = {
			x = int
			y = int
		}
		font = <font>
		## cardinality = 0..1
		cursor = {
			x = int
			y = int
		}
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		instantTextBoxType = bool
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		max_characters = int
		## cardinality = 0..1
		allow_multi_line = bool
		## cardinality = 0..1
		defaultSelection = bool

		#id and nav can be attached to various elements. See the bottom of this file.
		## cardinality = 0..1
		<id_and_nav>

		## cardinality = 0..1
		#overlay can be attached to various elements it seems. The format is always the same! see bottom of this file!
		<overlay>
	}

	# Container for listed items, usually option entries in event/diplo windows.
	smoothListbox_type = {
		name = <key>
		position = {
			x = int
			y = int
		}
		size = {
			x = int
			y = int
		}
		scrollbarType = <scrollbarType> #this is tied to instances defind as <scrollbarType> with a unique key.
		borderSize = {
			x = int
			y = int
		}
		## cardinality = 0..1
		backGround = <sprite_type>
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		autohide_scrollbar = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		spacing = int
		## cardinality = 0..1
		priority = int

		## cardinality = 0..1
		<id_and_nav>
	}

	# General graphical block
  	containerWindow_type = {
		name = <key>
		## cardinality = 0..1
		<background> #see the bottom of the file!
			## cardinality = 0..1
		size = {
			x = int
			y = int
		}
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		origo = enum[direction]
		## cardinality = 0..1
		clipping = bool
		## cardinality = 0..1
		moveable = bool
		## cardinality = 0..1
		show_position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		hide_position = {
			x = int
			y = int
		}
		## cardinality = 0..1
		animation_time = int
		## cardinality = 0..1
		animation_type = decelerated
		## cardinality = 0..1
		hide_animation_type = decelerated
		## cardinality = 0..1
		show_animation_type = decelerated

		#basically containerwindowtype elements can have any element - including other containerwindowtypes nestled within them.
		#i do not know the rules for what is ok and what isn't.
		## cardinality = 0..inf
		<gui_type>
	}

	# Normal icon instance
	icon_type = {
		name = <key>
		#one of these two is required!
		## cardinality = 0..1
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		spriteType = <sprite_type>
		position = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		centerPosition = bool
		## cardinality = 0..1
		alwaystransparent = bool
		## cardinality = 0..1
		rotation = float
		## cardinality = 0..1
		scale = float
		## cardinality = 0..1
		frame = int
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		pdx_tooltip = <localisation>
	}

	# Default game button. In some cases could be replaced by effectButtonType without CTD
  	button_type = {
		name = <key>

		#one of these is required for buttontype entries. I don't know whats the difference between these sprites, but code wise they are the same I think. pls check.
		## cardinality = 0..1
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		spriteType = <sprite_type>
		position = {
		  x = int
		  y = int
		}
		orientation = enum[direction]
		borderSize = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		hitbox_margin = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		font = <font>
		#there can be text = and buttonText = for buttontypes. I don't know whats the difference between them.
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		buttonText = <localisation>
		## cardinality = 0..1
		buttonFont = <font>
		## cardinality = 0..1
		scale = float

		## cardinality = 0..1
		pdx_tooltip = <localisation> #this is a tooltip localisation.
		## cardinality = 0..1
		delayedTooltipText = <localisation>
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		oversound = <sound_effect>

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool

		## cardinality = 0..1
		shortcut = scalar #--> this isn't scalar really, its a key binding with the keyboard!.
		## cardinality = 0..1
		multiline = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		actionShortcut = enum[actionshortcut]

		## cardinality = 0..1
		<id_and_nav>
	}

	# Not a vanilla's content.
	# Similar to default buttonType, but linked with specific events, described in button_effects.
	# I guess, all parameters below are similar to buttonType, but need to make some tests -- Iyur
	effectButton_type = {
		name = <key>
		effect = <button_effect> #defined under /common/button_effects.

		#one of these is required for buttontype entries. I don't know whats the difference between these sprites, but code wise they are the same I think. pls check.
		## cardinality = 0..1
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		spriteType = <sprite_type>
		position = {
		  x = int
		  y = int
		}
		orientation = enum[direction]
		borderSize = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		hitbox_margin = {
		  x = int
		  y = int
		}
		## cardinality = 0..1
		font = <font>
		#there can be text = and buttonText = for buttontypes. I don't know whats the difference between them.
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		buttonText = <localisation>
		## cardinality = 0..1
		buttonFont = <font>
		## cardinality = 0..1
		scale = float

		## cardinality = 0..1
		pdx_tooltip = <localisation> #this is a tooltip localisation.
		## cardinality = 0..1
		delayedTooltipText = <localisation>
		## cardinality = 0..1
		tooltip_mode_enabled = bool
		## cardinality = 0..1
		oversound = <sound_effect>

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool

		## cardinality = 0..1
		shortcut = scalar #--> this isn't scalar really, its a key binding with the keyboard!.
		## cardinality = 0..1
		multiline = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		actionShortcut = enum[actionshortcut]

		## cardinality = 0..1
		<id_and_nav>
	}

	# Icon-like button ?
    guiButton_type = {
		name = <key>
		position = {
		  x = int
		  y = int
		}
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		parent = <gui_type>

		#there appear to be various different types of optional localisations here
		## cardinality = 0..1
		tooltip = <localisation>
		## cardinality = 0..1
		tooltipText = <localisation>
		## cardinality = 0..1
		delayedTooltipText = <localisation>
		## cardinality = 0..1
		buttonText = <localisation>
		## cardinality = 0..1
		buttonFont = <font>
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		shortcut = scalar #not really scalar, tied to a keyboard key!

		#clicksound seems to be mutually exclusive with the no_clicksound bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool
		## cardinality = 0..1
		frame = int #for portraits, according to vanilla.
	}

	# Default scrollbar
	scrollbar_type = {
		name = "standardtext_slider_small"
		slider = <guiButtonType>
		track= <guiButtonType>
		leftbutton = <guiButtonType>
		rightbutton = <guiButtonType>
		priority = int #no idea what this is.
		size = {
		  x = int
		  y = int
		}
		position = {
		  x = int
		  y = int
		}
		borderSize = {
		  x = int
		  y = int
		}
		maxValue = in
		minValue = int
		stepSize = int
		startValue = int
		horizontal = int

		#in vanilla the buttons used in the above are nestled within the scrollbarType field, see core.gui.
    	## cardinality = 0..inf
		<guiButtonType>
	}

	# ?
	extendedScrollbar_type = {
		name = "right_horizontal_slider"
		position = {
		  x = int
		  y = int
		}
 		size = {
		  width = int
		  height = int
		}
		startValue = int
		horizontal = bool
		## cardinality = 0..1
		background = {
			name = <key>
			quadTextureSprite = <sprite_type>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		track = {
			name = <key>
			quadTextureSprite = <sprite_type>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		slider = {
			name = <key>
			quadTextureSprite = <sprite_type>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		decreaseButton = {
			name = <key>
			quadTextureSprite = <sprite_type>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
		## cardinality = 0..1
		increaseButton = {
			name = <key>
			quadTextureSprite = <sprite_type>
			## cardinality = 0..1
			position = {
				x = int
				y = int
			}
		}
	}

	#gridBoxType = {}
	#dropDownBoxType = {}
	#expandedWindow = {}
	#checkboxType = {}
	#checkboxType = {}
	#listboxType = {}
	#windowType = {}
	#spinnerType = {}



# MINOR / OPTIONAL STUFF

# graphical overlay for some elements
overlay = {
	name = <containerWindowType> #example: "selected_overlay" --> this refers to an containerWindowType with this key!
	spriteType = <sprite_type>
	position = {
		x = int
		y = int
	}
	size = {
		x = int
		y = int
	}
}

# Moving between buttons/gui stuff
id_and_nav = {
	#these appear only in the species gamepad gui configuration. They appear to be tied to hardcoded instances that connect to
	#asset selector files (see gfx/portraits/asset_selectors) or localisations - examples: "research" "scientist" "ok etc.
	#there should probably be a way to parse these and figure this out.
	## cardinality = 0..1 #id is not always required it seem, but when the navUP/DOWN/RIGHT/LEFT uses a key with id_ it appears to be required.
	id = scalar #"id_name"
	## cardinality = 0..1
	navUp = scalar #"id_male"
	## cardinality = 0..1
	navDown = scalar #"id_title"
	## cardinality = 0..1
	navRight = scalar #"id_hairstyle"
	## cardinality = 0..1
	navLeft = scalar #"id_hairstyle"
	## cardinality = 0..1
}

# Background section (mostly for containers)
background = {
	name = <key>
	quadTextureSprite = <sprite_type>
	# optional
	#spriteType = <sprite_type>
	## cardinality = 0..1
	position = {
		x = int
		y = int
	}
	## cardinality = 0..1
	pdx_tooltip = <localisation>
}
