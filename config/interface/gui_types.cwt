types = {
	type[gui_type] = {
		path = "game/interface" #*.GUI files! 
	}
}

#GUI files under /interface have a unique structure. They are nestled within guiTypes = { }, within which there are different elements such as 
#containerWindowType = { }, listBoxType = { }, scrollbarType = { } and so forth that nestle various different elements underneath them. 
#Each one of these elements usually has a unique name or key identifier, but the problem is that
#you can have these elements nestled within other such like elements as well. For example, you can have containerwindowtype nestled within another
#containerwindowtype. This will require some work on Dayshine's part to figure out how to parse this. I also do not know what is optional
#and what is not optional. CWTools should warn users that removing vanilla elements alltogether will result in a CTD!

gui_type = { 
     ## cardinality = 0..inf
  	textboxType={
		name = <key>
		textureFile = filepath
		font = <font>
		borderSize = { 
			x = int
			y = int
		}        
		position = { 
			x = int
			y = int
		}
		maxWidth = int
		maxHeight = int
    }
    ## cardinality = 0..inf
  	instantTextboxType={
		name = <key>
		position = { 
			x = int
			y = int
		}
		maxWidth = int
		maxHeight = int
		font = <font>
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		text_color_code = <color_define>
		## cardinality = 0..1
		alwaysTransparent = bool
		## cardinality = 0..1
		fixedSize = bool

		#one of these is required!
		## cardinality = 0..1
		format = enum[direction]    
		## cardinality = 0..1
		orientation = enum[direction]      
    }    
    ## cardinality = 0..inf    
	editBoxType = {
		name = <key>
		position = { 
			x = int
			y = int
		  }
		size = { 
			x = int
			y = int
		}
		font = <font>
		## cardinality = 0..1
		cursor = { 
			x = int
			y = int
		}      
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		instantTextBoxType = bool       
		## cardinality = 0..1
		orientation = enum[direction]

		#id and nav can be attached to various elements. See the bottom of this file. 
		## cardinality = 0..1
		<id_and_nav>

		## cardinality = 0..1
		#overlay can be attached to various elements it seems. The format is always the same! see bottom of this file!
		<overlay>			      
	}
	## cardinality = 0..inf
	smoothListboxType = {
		name = <key>
		position = { 
			x = int
			y = int
		}      
		size = { 
			x = int
			y = int
		}      
		scrollbarType = <scrollbarType> #this is tied to instances defind as <scrollbarType> with a unique key. 
		borderSize = { 
			x = int
			y = int
		}      
		## cardinality = 0..1
		backGround = <sprite_type> 
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		autohide_scrollbar = bool
		## cardinality = 0..1
		defaultSelection = bool    
		## cardinality = 0..1
		spacing = int
		## cardinality = 0..1
		<id_and_nav>
	}      

	## cardinality = 0..inf
  	containerWindowType = {    
		name = <key>
		## cardinality = 0..1
		<background> #see the bottom of the file!
			## cardinality = 0..1
		size = { 
			x = int
			y = int
		}      
		## cardinality = 0..1
		position = { 
			x = int
			y = int
		}       
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		origo = enum[direction]		
		## cardinality = 0..1
		clipping = bool
		## cardinality = 0..1
		moveable = bool
		## cardinality = 0..1
		show_position = { 
			x = int
			y = int
		}  
		## cardinality = 0..1
		hide_position = { 
			x = int
			y = int
		}  
		## cardinality = 0..1
		animation_time = int
		## cardinality = 0..1
		animation_type = decelerated    
		## cardinality = 0..1
		hide_animation_type = decelerated
		## cardinality = 0..1
		show_animation_type = decelerated

		#basically containerwindowtype elements can have any element - including other containerwindowtypes nestled within them.
		#i do not know the rules for what is ok and what isn't.
		## cardinality = 0..inf
		<gui_type>
	}    
	## cardinality = 0..inf
	iconType = {
		name = <key>
		#one of these two is required!
		## cardinality = 0..1
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		spriteType = <sprite_type>

		position = { 
		  x = int
		  y = int
		}      
		 ## cardinality = 0..1
		orientation = enum[direction]
		 ## cardinality = 0..1
		alwaystransparent = bool
	}   
    ## cardinality = 0..inf
  	buttonType = {
		name = <key>

		#one of these is required for buttontype entries. I don't know whats the difference between these sprites, but code wise they are the same I think. pls check. 
		## cardinality = 0..1
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		spriteType = <sprite_type>

		position = { 
		  x = int
		  y = int
		}      
		orientation = enum[direction]			
		borderSize = { 
		  x = int
		  y = int
		}      
		font = <font>
		#there can be text = and buttonText = for buttontypes. I don't know whats the difference between them. 
		## cardinality = 0..1
		text = <localisation>
		## cardinality = 0..1
		buttonText = <localisation>    

		## cardinality = 0..1
		pdx_tooltip = <localisation> #this is a tooltip localisation. 
		## cardinality = 0..1
		oversound = <sound_effect>

		#clicksound seems to be mutually exclusive with the no_clicksound bool 
		## cardinality = 0..1      
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool
      
		## cardinality = 0..1
		shortcut = scalar #--> this isn't scalar really, its a key binding with the keyboard!. 
		## cardinality = 0..1
		multiline = bool
		## cardinality = 0..1
		defaultSelection = bool
		## cardinality = 0..1
		clicksound = <sound_effect>
		## cardinality = 0..1
		actionShortcut = enum[actionshortcut]
		## cardinality = 0..1
		<id_and_nav>
	}   
    guiButtonType = {
		name = <key>
		position = { 
		  x = int
		  y = int
		}        
		quadTextureSprite = <sprite_type>
		## cardinality = 0..1
		parent = <gui_type>

		#there appear to be various different types of optional localisations here  
		## cardinality = 0..1
		tooltip = <localisation>
		## cardinality = 0..1
		tooltipText = <localisation>
		## cardinality = 0..1
		delayedTooltipText = <localisation>
		## cardinality = 0..1
		buttonText = <localisation>
		## cardinality = 0..1
		buttonFont = <font>
		## cardinality = 0..1
		orientation = enum[direction]
		## cardinality = 0..1
		shortcut = scalar #not really scalar, tied to a keyboard key!

		#clicksound seems to be mutually exclusive with the no_clicksound bool 
		## cardinality = 0..1      
		clicksound = <sound_effect>
		## cardinality = 0..1
		no_clicksound = bool      
	}	
	effectButtonType = { #this is used to add new mod buttons, not used in vanilla but by other mods (e.g. iyur's and had's mods). 
		name = <key>
		buttonText = <localisation>
		effect = <button_effect> #defined under /common/button_effects.		
		position = { 
		  x = int
		  y = int
		}         
		size = { 
		  x = int
		  y = int
		}        
		quadTextureSprite = <sprite_type>
		font = <font>
		## cardinality = 0..1		
		orientation = enum[direction]
		## cardinality = 0..1
		shortcut = scalar #keyboard short!
		## cardinality = 0..1
		clicksound = <sound_effect>		
	}	
	
}

enums = { 
  enum[direction] = { 
    UPPER_LEFT #can be lower case as well! Vanilla has a mix of the two for no reason. 
    upper_left
    UPPER_RIGHT
    upper_right
    CENTER_DOWN
    center_down
    CENTER_UP
    center_up
    LOWER_LEFT
    lower_left
    LOWER_RIGHT
    lower_right
    LEFT
    left
    RIGHT #this one doesn't appear in vanilla, I just assumed it exists in theory. 
    right
    CENTER
    center
  }
  enum[actionshortcut] = {
    accept
    canel
    delete
    focus_camera
}  
    
overlay = {
	name = <containerWindowType> #example: "selected_overlay" --> this refers to an containerWindowType with this key!
	spriteType = <sprite_type>
	position = { 
		x = int
		y = int
	}
	size = { 
		x = int
		y = int
	}  
}  
id_and_nav = { 
	#these appear only in the species gamepad gui configuration. They appear to be tied to hardcoded instances that connect to 
	#asset selector files (see gfx/portraits/asset_selectors) or localisations - examples: "research" "scientist" "ok etc. 
	#there should probably be a way to parse these and figure this out. 
	## cardinality = 0..1 #id is not always required it seem, but when the navUP/DOWN/RIGHT/LEFT uses a key with id_ it appears to be required.
	id = scalar #"id_name"
	## cardinality = 0..1
	navUp = scalar #"id_male"
	## cardinality = 0..1
	navDown = scalar #"id_title"
	## cardinality = 0..1
	navRight = scalar #"id_hairstyle"
	## cardinality = 0..1
	navLeft = scalar #"id_hairstyle"
	## cardinality = 0..1            
} 

background = {
	name = <key>
	quadTextureSprite = <sprite_type>
	position = { 
		x = int
		y = int
	}        
}
