types = {
	## type_key_filter = entity
	type[model_entity] = {
		name_field = name
		path = "gfx/models" #need to add subfolder to the parsing here! - these are stored in *.asset files!
		severity = warning
   }
   ## type_key_filter = pdxmesh
	type[model_mesh] = {
		name_field = name
		skip_root_key = objectTypes
		path = "gfx/models" #need to add subfolder to the parsing here! - these are stored in *.gfx files!
		severity = warning
   }
   ## type_key_filter = animation
	type[model_animation] = {
		name_field = name
		path = "gfx/models" #need to add subfolder to the parsing here! - these are stored in *.asset files!
		severity = warning
   }
}

  #the container for each entry is called "entity = {" in the asset file
  #the names for planet entities are connected to the planet_classes files and have a serialized naming scheme
  #the naming scheme is <planet_name without pc_>_int_entity and planets can have multiple entities, with the game spawning one of the entities.
  #ships naming scheme is <species_class>int_shipsize_entity
  #examples: toxic_planet_01_entity toxic_planet_02_entity toxic_planet_03_entity toxic_planet_04_entity - all connected to the planet_class files entry for pc_toxic, where entity is defined as "toxic_planet"
  #arthropoid_01_military_station_large_entity

  enums = {
	  enum[model_animation_types] = {
		  idle
		  idle2
		  sad
		  sad2
		  death
		  death2
		  death3
		  attack
		  moving
		  survey
		  scan
		  miss
		  miss2
		  miss_reversed
		  miss2_reversed
		  start
		  fly
	  }
  }
model_entity = {
  name = scalar
  ## cardinality = 0..1
  pdxmesh = <model_mesh> #this connects to meshes defined in a *.gfx file!

  ## cardinality = 0..1
  cull_radius = float
  ## cardinality = 0..1
  scale = float
  ## cardinality = 0..1
  playback_rate = float
  ## cardinality = 0..1
  default_state = enum[model_states]
  ## cardinality = 0..1
  get_state_from_parent = bool
  ## cardinality = 0..inf
  state = {
		name = enum[model_states]
		## cardinality = 0..1
		state_time = float
		## cardinality = 0..1
		looping = bool
		## cardinality = 0..1
		next_state = enum[model_states]
		## cardinality = 0..1
		chance = bool
		## cardinality = 0..1
		get_state_from_parent = bool
		## cardinality = 0..1
		animation = <model_animation> #animations are defined in a different file in the same folder, also a *.asset file
		## cardinality = 0..1
   		animation = enum[model_animation_types]
		## cardinality = 0..1
		animation_speed = float
		## cardinality = 0..1
		animation_blend_time = int
		## cardinality = 0..1
		chance = float
		## cardinality = 0..1
		time_offset = {
			## cardinality = 2..2
			int
		}
		#locator here is linked to both attach = { in the same files and ship_sizes under common!
		## cardinality = 0..inf
		locator = {
			name = scalar #this is an override for locators defined in the models. This key is used in the ship_sizes file as well as when attach = { is used in an asset file.
			## cardinality = 0..1
			position = {
				## cardinality = 3..3
				float
			} #XYZ axis coordinates and degrees: 0 0 -14.5
			## cardinality = 0..1
			rotation = {
				## cardinality = 3..3
				float
			}
		}
		## cardinality = 0..1
		game_data = {
			bloom_factor = float
			uv_animation_speed = float
			uv_animation_direction = {
				## cardinality = 2..2
				float
			}
		}
		## cardinality = 0..inf
		event = {
			## cardinality = 0..1
			id = beam_start #this is tied to the planet killer projectiles, see the comment i left in projectiles -- exnihil.
			## cardinality = 0..1			
			time = int
			## cardinality = 0..1
			node = scalar #"bombardment_location_2" for example, this seem to point to a *.mesh file
			## cardinality = 0..1
			particle = scalar #"planetary_bombardment_effect" for example, this points to a file stored under game/gfx/particles/_generic_particles.gfx
			## cardinality = 0..1
			keep_particle = bool
			## cardinality = 0..1
			use_parent_nodes = bool
			## cardinality = 0..1
			trigger_once = bool
			## cardinality = 0..1
			sound = {
				soundeffect = <sound_effect> #"bombardment_explosion" -  files are stored under game/sound/category.asset	}
				## cardinality = 0..1
				stop_on_state_change = bool
			}
		}
		## cardinality = 0..inf
		start_event = {
			## cardinality = 0..1
			time = int
			## cardinality = 0..1
			trigger_once = bool
			## cardinality = 0..1
			node = scalar #"bombardment_location_2" for example, this seem to point to a *.mesh file
			## cardinality = 0..1
			particle = scalar #"planetary_bombardment_effect" for example, this points to a file stored under game/gfx/particles/_generic_particles.gfx
			## cardinality = 0..1
			keep_particle = bool
			## cardinality = 0..1
			sound = {
				soundeffect = <sound_effect> #"bombardment_explosion" -  files are stored under game/sound/category.asset	}
				## cardinality = 0..1
				stop_on_state_change = bool
			}
		}
	}
	## cardinality = 0..inf
	attach = {
		# TODO: Make this smarter
		enum[locators] = <model_entity> #see locator in this file.
	}
	## cardinality = 0..1
	game_data = {
		## cardinality = 0..1
		size = int
		## cardinality = 0..1
		emissive_recolor_crunch = float
		## cardinality = 0..1
		trail_locators = {
			## cardinality = 0..inf
			key = { #example: exhaust_01, this probably connects to something
				## cardinality = 0..1
				width = int
				## cardinality = 0..1
				length = int
				## cardinality = 0..1
				height = int
			}
		}
		## cardinality = 0..1
		uv_animation_speed = float
		## cardinality = 0..1
		uv_animation_direction = {
			## cardinality = 2..3
			float
		}
		## cardinality = 0..1
		bloom_factor = float
		## cardinality = 0..1
		shader_type = scalar
	}
	#locator here is linked to both attach = { in the same files and ship_sizes under common!
	## cardinality = 0..inf
	locator = {
		name = scalar #this is an override for locators defined in the models. This key is used in the ship_sizes file as well as when attach = { is used in an asset file.
		## cardinality = 0..1
		position = {
			## cardinality = 3..3
			float
		} #XYZ axis coordinates and degrees: 0 0 -14.5
		## cardinality = 0..1
		rotation = {
			## cardinality = 3..3
			float
		}
	}

	#these need to be updated and linked to other files
	## cardinality = 0..inf
	meshsettings = {
		name = scalar #examples: "planet_geosphereShape" "polesShape" "clouds_geosphereShape"
		## cardinality = 0..1
		index = int
		#The links below link to files stored under game/gfx/models/planets + subfolders!
		## cardinality = 0..1
		texture_diffuse = scalar ##TODO filepath #example: "toxic_01_purple_diffuse.dds"
		## cardinality = 0..1
		texture_normal = scalar ##TODO filepath #example: "toxic_01_normal.dds"
		## cardinality = 0..1
		texture_specular = scalar ##TODO filepath #example: "toxic_01_spec.dds"
		## cardinality = 0..1
		shader = scalar #this seems to point to a shader mesh, dunno where its stored. example: "PdxMeshPlanetEmissive". I believe this is stored in a *.mesh file
	}
}

enums = {

  #these are tied to bombardment stances somehow, but I have no idea how - exnihil
  #TODO - link this to bombardment stances
  enum[model_states] = {
		idle
		bombard_selective #planet state
		bombard_indiscriminate #planet state
		bombard_armageddon #planet state
   		bombard_raiding #planet state
		attack #ship state
		death #ship state
		moving #ship state
		sad
		stop
		working
		start
		start2
		wind_down
		wind_up
		jump_in
		jump_out
		explode_med_shield
		explode_med_hp
		default
		no_state
	}		
	complex_enum[locators] = {
		path = "game/gfx/models"
		name = {
			locator = {
				name = enum_name
			}
			#TODO: support multiple routes
			state = {
				locator = {
					name = enum_name
				}
			}
		}
	}
 }

model_mesh = { #the container for all meshes is defined as objectTypes = { at the top of the file, please check, with each entry being defined under pdxmesh = {
	name = scalar
	file = filepath #there is a full path string here - the path should be parsed. Example: file = "gfx/models/planets/shielded_planet.mesh"
	## cardinality = 0..1
	scale = float
	## cardinality = 0..inf
	meshsettings = {
		## cardinality = 0..1
		name = scalar
		## cardinality = 0..1
		index = int
		## cardinality = 0..1
		shader = scalar #Shader
		## cardinality = 0..1
		texture_diffuse = scalar #filepath
		## cardinality = 0..1
		texture_normal = scalar #filepath
		## cardinality = 0..1
		texture_specular = scalar #filepath

	}
	## cardinality = 0..inf
	animation = {
		id = enum[model_animation_types] #example = "idle"
		type = <model_animation> #this connects to an animation defined in an *.asset file!
	}
	## cardinality = 0..1
	cull_distance = scalar #WTF? example: cull_distance = 999999999.0f but also = 1000
}

model_animation = { #the container here is called animation = { for each animation
	name = scalar #example: "neutron_star_idle_animation"
	file = scalar ##TODO make it filepath #this connects to *.anim file stored in the same folder as the asset file, it seems. Example: "neutron_star_idle.anim"
}
