


## scope = first_contact
###Sets the first contact site to using a specified stage
alias[effect:set_first_contact_stage] = <first_contact_stage>

## scope = first_contact
###Completes the first contact site, establishing communications.
alias[effect:finish_first_contact] = yes

## scope = first_contact
###Sets an arbitrarily-named flag on the scoped first contact
alias[effect:set_first_contact_flag] = value_set[first_contact_flag]

## scope = first_contact
###Sets an arbitrarily-named flag on the scoped first contact
alias[effect:set_timed_first_contact_flag] = {
	flag = value_set[first_contact_flag]
	enum[days_months_years] = int
}

## scope = first_contact
###Removes a previously-set flag from the scoped first contact
alias[effect:remove_first_contact_flag] = value[first_contact_flag]

## scope = first_contact
###Checks whether the country has the speficied first contact flag
alias[trigger:has_first_contact_flag] = value[first_contact_flag]


###Checks whether the current country is allowed to have the specified technology, i.e. does it fulfil the potential = { } field for that tech.
alias[trigger:can_research_technology] = <technology>

###Prints a custom error to the error log
alias[effect:log_error] = scalar


## scope = country
###Checks whether the target country has a technology the current country can steal via copy_random_tech_from effect
alias[trigger:can_copy_random_tech_from] = {
	who = scope[country]
	## cardinality = 0..1
	category = <technology_category>
	## cardinality = 0..1
	area = enum[research_areas]
}

## scope = country
###Adds a random tech from the target country within the given category and tech area constraints.
alias[effect:copy_random_tech_from] = {
	who = scope[country]
	## cardinality = 0..1
	category = <technology_category>
	## cardinality = 0..1
	area = enum[research_areas]
	## cardinality = 0..1
	###Optional: this makes it grant the tech option rather than the whole tech
	progress = float[0.0..1.0]
}

## scope = country
###Adds the defined amount of intel toward the target empire.
alias[effect:add_intel] = {
	who = scope[country]
	amount = float
}

###Checks the amount of intel the current country has toward the target empire.
alias[trigger:intel] = {
	who = scope[country]
	value = float
}

###Checks the amount of intel the current country has toward the target empire.
alias[trigger:has_intel_level] = {
	who = scope[country]
	category = <intel_category>
	level = int
}

## scope = country
## push_scope = first_contact
###Iterate through each first contact site the current country has
alias[trigger:any_first_contact] = {
	alias_name[trigger] = alias_match_left[trigger]
	##cardinality = 0..1
	count = int
}

## scope = country
## push_scope = first_contact
###Iterate through each first contact site the current country has
alias[trigger:count_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	count = int
	count = all
}

## scope = country
## push_scope = first_contact
###Iterate through each first contact site the current country has
alias[effect:random_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = first_contact
###Iterate through each first contact site the current country has
alias[effect:every_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = first_contact
###Iterate through each active first contact site the current country has
alias[trigger:any_active_first_contact] = {
	alias_name[trigger] = alias_match_left[trigger]
	##cardinality = 0..1
	count = int
}

## scope = country
## push_scope = first_contact
###Iterate through each active first contact site the current country has
alias[trigger:count_active_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	count = int
	count = all
}

## scope = country
## push_scope = first_contact
###Iterate through each active first contact site the current country has
alias[effect:random_active_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = first_contact
###Iterate through each active first contact site the current country has
alias[effect:every_active_first_contact] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = spy_network
###Iterate through each spy network
alias[trigger:any_spynetwork] = {
	alias_name[trigger] = alias_match_left[trigger]
	##cardinality = 0..1
	count = int
}

## scope = country
## push_scope = spy_network
###Iterate through each spy network
alias[trigger:count_spynetwork] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	count = int
	count = all
}

## scope = country
## push_scope = spy_network
###Iterate through each spy network
alias[effect:random_spynetwork] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = spy_network
###Iterate through each spy network
alias[effect:every_spynetwork] = {
	##cardinality = 0..1
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	alias_name[effect] = alias_match_left[effect]
}


###Unlocks the selected Menace Perk for the current empire
alias[effect:unlock_menace_perk] = <menace_perk>

###Deactivates the selected Menace Perk for the current empire
alias[effect:deactivate_menace_perk] = <menace_perk>

###Gives the player the reward for the specified crisis mean
alias[effect:unlock_menace_perk] = <crisis_mean>

###Sets whether the Galactic Emperor can change Imperial Council members or not
alias[effect:set_emperor_can_change_council_members] = bool

###Sets a specified policy group to have the cooldown specified in defines
alias[effect:set_policy_cooldown] = <policy>

###Sets the current ship or fleet to be destroyed and spawn a debris project for the specified country.
alias[effect:destroy_and_spawn_debris_for] = scope_group[target_country]

###Sets the star's star class, affecting system and galactic map graphics and potentially modifiers.
alias[effect:set_star_class] = <star_class>

###Fires an on_action (including custom-made ones), can set scopes like in fire event effects
alias[effect:fire_on_action] = {
	on_action = <on_action>
	## cardinality = 0..1
	scopes = {
		## cardinality = 0..1
		from = scope[any]
		## cardinality = 0..1
		fromfrom = scope[any]
		## cardinality = 0..1
		fromfromfrom = scope[any]
		## cardinality = 0..1
		fromfromfromfrom = scope[any]
	}
}

###sSets the current fleet to go missing in action and return home.
alias[effect:set_mia] = yes

### Checks whether a country can set a policy via set_policy effect
alias[trigger:can_set_policy] = {
	policy = <policy>
	option = enum[policy_option]
}

## scope = pop
alias[trigger:would_work_job] = <job>

## scope = planet
alias[trigger:can_fill_jobs_for_buildable] = <building>
## scope = planet
alias[trigger:can_fill_jobs_for_buildable] = <district>

###Checks if the scoped fleet or ship is civilian (as set in ship sizes).
alias[trigger:is_civilian] = bool

###Checks if a country has a specific Menace Perk unlocked.
alias[trigger:has_menace_perk] = <menace_perk>

###Compares the spy power of the network
alias[trigger:has_spy_power] = int

###Compares the available spy power of the network
alias[trigger:has_available_spy_power] = int

###Checks if the scope is of a specific category
alias[trigger:has_espionage_category] = <espionage_category>

###Checks if the scope is currently running an espionage operation
alias[trigger:is_running_espionage_operation] = bool

###Checks if a country has a specific crisis path.
alias[trigger:has_crisis_path] = <crisis_path>

###Checks if scoped network has any power
alias[trigger:has_spynetwork] = bool

###Checks if the scope hold an asset of specified type
alias[trigger:has_espionage_asset] = scalar #<espionage_asset>

###Checks if the scoped country has an active First Contact site with the target country
alias[trigger:has_active_first_contact_with] = scope_group[target_country]

###Checks if the scoped country is allowed to have a First Contact site with the target country
alias[trigger:can_have_first_contact_site_with] = scope_group[target_country]

###Checks if the planet is artificial (as set in planet_classes)
alias[trigger:is_artificial] = bool

###Checks if the solar has its owner's capital
alias[trigger:is_capital_system] = bool

###Checks if the espionage operation has a certain modifier specific for the current stage
alias[trigger:has_stage_modifier] = <static_modifier>

###Checks if the Galactic Defense Force or Imperial Armada exists
alias[trigger:galactic_defense_force_exists] = bool

###Checks a variable for the scope if a certain amount of arithmetic is done to it (note: the variable's value is not changed by this trigger)
alias[trigger:check_variable_arithmetic] = {
	which = value[variable]
	by = float
	by = value[variable]
	by = scope[any]
	by = {
		scope = scope[any]
		variable = value[variable]
	}
	###Specify >/< on the value or variable fields
	value = float
	value = value[variable]
	value = scope[any]
	value = {
		scope = scope[any]
		variable = value[variable]
	}
	mode = enum[maths]
}
