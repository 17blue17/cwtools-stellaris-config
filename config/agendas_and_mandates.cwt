types = {
	type[agendas] = {
		path = "game/common/agendas"
	}
	type[mandate] = {
		path = "game/common/mandates"
	}
}

agenda = { 
  ## replace_scope = { this = leader root = leader from = from }
  weight_modifier = {
		## cardinality = 0..1
		weight = float
		## cardinality = 0..1
		factor = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]  
  }
  modifier = { 
    ## cardinality = 0..inf
    alias_name[modifier_rule] = alias_match_left[modifier_rule]  
  }
}
mandate = { 
  ## replace_scope = { this = planet root = planet from = from } #im not 100% about the scopes here, this is what vanilla appear to be. It uses owner to scope to c ocountry
  valid = { 
    alias_name[trigger] = alias_match_left[trigger]
  } 
  ## cardinality = 0..1
  parameters = {
    ## cardinality = 0..1
    self = <country>
    ## cardinality = 0..1
    enemy = <country>
    ## cardinality = 0..1    
    master = <country> #these are targets or scopes. master = country, planet = planet, self = country, enemy = country are whay appears in vanilla
    ## cardinality = 0..1
    planet = <planet>
  }
  ## replace_scope = { this = planet root = planet from = from } #im not 100% about the scopes here, this is what vanilla appear to be. It uses owner to scope to c ocountry
  ## cardinality = 0..1
  on_term_started = { 
    alias_name[effect] = alias_match_left[effect]
   } 
  ## replace_scope = { this = planet root = planet from = from } #im not 100% about the scopes here, this is what vanilla appear to be. It uses owner to scope to c ocountry
  ## cardinality = 0..1
  on_term_ended = { 
    alias_name[effect] = alias_match_left[effect]
   }    
}
